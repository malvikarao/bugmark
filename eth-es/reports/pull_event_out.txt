Using network 'development'.

TruffleContract {
  constructor: 
   { [Function: TruffleContract]
     _static_methods: 
      { setProvider: [Function: setProvider],
        new: [Function: new],
        at: [Function: at],
        deployed: [Function: deployed],
        defaults: [Function: defaults],
        hasNetwork: [Function: hasNetwork],
        isDeployed: [Function: isDeployed],
        detectNetwork: [Function: detectNetwork],
        setNetwork: [Function: setNetwork],
        resetAddress: [Function: resetAddress],
        link: [Function: link],
        clone: [Function: clone],
        addProp: [Function: addProp],
        toJSON: [Function: toJSON] },
     _properties: 
      { contract_name: [Object],
        contractName: [Object],
        abi: [Object],
        network: [Function: network],
        networks: [Function: networks],
        address: [Object],
        links: [Function: links],
        events: [Function: events],
        binary: [Function: binary],
        deployedBinary: [Function: deployedBinary],
        unlinked_binary: [Object],
        bytecode: [Object],
        deployedBytecode: [Object],
        sourceMap: [Object],
        deployedSourceMap: [Object],
        source: [Object],
        sourcePath: [Object],
        ast: [Object],
        compiler: [Object],
        schema_version: [Function: schema_version],
        schemaVersion: [Function: schemaVersion],
        updated_at: [Function: updated_at],
        updatedAt: [Function: updatedAt] },
     _property_values: {},
     _json: 
      { contractName: 'EventStore',
        abi: [Object],
        bytecode: '0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504360018190555061025f806100656000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f1461005c578063643fd0df146100b157806378f7cac61461012f575b600080fd5b341561006757600080fd5b61006f610158565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100bc57600080fd5b610115600480803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061017d565b604051808215151515815260200191505060405180910390f35b341561013a57600080fd5b61014261022d565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f5dc1bc51e9487c8a8e1c89bba2b396efe9d980a3444ec617056910fd5f74b71c83836040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101e85780820151818401526020810190506101cd565b50505050905090810190601f1680156102155780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16001905092915050565b600154815600a165627a7a72305820e60740191576938b416e09f5fec5f1c8a3b57d387b2f08ecdc935ccc4e921d130029',
        deployedBytecode: '0x606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f1461005c578063643fd0df146100b157806378f7cac61461012f575b600080fd5b341561006757600080fd5b61006f610158565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100bc57600080fd5b610115600480803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061017d565b604051808215151515815260200191505060405180910390f35b341561013a57600080fd5b61014261022d565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f5dc1bc51e9487c8a8e1c89bba2b396efe9d980a3444ec617056910fd5f74b71c83836040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101e85780820151818401526020810190506101cd565b50505050905090810190601f1680156102155780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16001905092915050565b600154815600a165627a7a72305820e60740191576938b416e09f5fec5f1c8a3b57d387b2f08ecdc935ccc4e921d130029',
        sourceMap: '25:346:0:-;;;160:95;;;;;;;;202:10;192:7;;:20;;;;;;;;;;;;;;;;;;239:12;222:14;:29;;;;25:346;;;;;;',
        deployedSourceMap: '25:346:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;52:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;258:110;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;77:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;52:22;;;;;;;;;;;;;:::o;258:110::-;308:4;324:25;337:3;341:7;324:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;360:4:0;353:11;;258:110;;;;:::o;77:26::-;;;;:::o',
        source: 'pragma solidity ^0.4.4;\n\ncontract EventStore {\n\n    address public creator;\n\tuint public blockCreatedOn;\n\n\tevent GenericEvent(uint256 id1, string string1);\n\t\n\n\tfunction EventStore() {\n        creator = msg.sender;\n        blockCreatedOn = block.number;\n\t}\n\n\tfunction log(uint256 id1, string string1) returns(bool) {\n        GenericEvent(id1,string1);\n\t\treturn true;\n\t}\n\n}\n',
        sourcePath: '/home/rsb/src/bugmark/eth-es/contracts/EventStore.sol',
        ast: [Object],
        compiler: [Object],
        networks: [Object],
        schemaVersion: '1.0.1',
        updatedAt: '2017-12-13T15:45:36.569Z' },
     setProvider: [Function: bound setProvider],
     new: [Function: bound new],
     at: [Function: bound at],
     deployed: [Function: bound deployed],
     defaults: [Function: bound defaults],
     hasNetwork: [Function: bound hasNetwork],
     isDeployed: [Function: bound isDeployed],
     detectNetwork: [Function: bound detectNetwork],
     setNetwork: [Function: bound setNetwork],
     resetAddress: [Function: bound resetAddress],
     link: [Function: bound link],
     clone: [Function: bound clone],
     addProp: [Function: bound addProp],
     toJSON: [Function: bound toJSON],
     web3: 
      Web3 {
        _requestManager: [Object],
        currentProvider: [Object],
        eth: [Object],
        db: [Object],
        shh: [Object],
        net: [Object],
        personal: [Object],
        bzz: [Object],
        settings: [Object],
        version: [Object],
        providers: [Object],
        _extend: [Object] },
     class_defaults: 
      { from: '0xf0a5885ae6a86c7f8bcc8ed0e6d1b789e87e42bf',
        gas: 6721975,
        gasPrice: 100000000000 },
     currentProvider: 
      HttpProvider {
        host: 'http://localhost:8545',
        timeout: 0,
        send: [Function],
        sendAsync: [Function],
        _alreadyWrapped: true },
     network_id: '4' },
  abi: 
   [ { constant: true,
       inputs: [],
       name: 'creator',
       outputs: [Object],
       payable: false,
       type: 'function',
       stateMutability: 'view' },
     { constant: false,
       inputs: [Object],
       name: 'log',
       outputs: [Object],
       payable: false,
       type: 'function',
       stateMutability: 'nonpayable' },
     { constant: true,
       inputs: [Object],
       name: 'blockCreatedOn',
       outputs: [Object],
       payable: false,
       type: 'function',
       stateMutability: 'view' },
     { inputs: [],
       payable: false,
       type: 'constructor',
       stateMutability: 'nonpayable' },
     { anonymous: false,
       inputs: [Object],
       name: 'GenericEvent',
       type: 'event' } ],
  contract: 
   Contract {
     _eth: 
      Eth {
        _requestManager: [Object],
        getBalance: [Object],
        getStorageAt: [Object],
        getCode: [Object],
        getBlock: [Object],
        getUncle: [Object],
        getCompilers: [Object],
        getBlockTransactionCount: [Object],
        getBlockUncleCount: [Object],
        getTransaction: [Object],
        getTransactionFromBlock: [Object],
        getTransactionReceipt: [Object],
        getTransactionCount: [Object],
        call: [Object],
        estimateGas: [Object],
        sendRawTransaction: [Object],
        signTransaction: [Object],
        sendTransaction: [Object],
        sign: [Object],
        compile: [Object],
        submitWork: [Object],
        getWork: [Object],
        coinbase: [Getter],
        getCoinbase: [Object],
        mining: [Getter],
        getMining: [Object],
        hashrate: [Getter],
        getHashrate: [Object],
        syncing: [Getter],
        getSyncing: [Object],
        gasPrice: [Getter],
        getGasPrice: [Object],
        accounts: [Getter],
        getAccounts: [Object],
        blockNumber: [Getter],
        getBlockNumber: [Object],
        protocolVersion: [Getter],
        getProtocolVersion: [Object],
        iban: [Object],
        sendIBANTransaction: [Function: bound transfer] },
     transactionHash: null,
     address: '0xa48b56dedb63a0bef8572925411fc8a8c053d2d7',
     abi: [ [Object], [Object], [Object], [Object], [Object] ],
     creator: 
      { [Function: bound ]
        request: [Function: bound ],
        call: [Function: bound ],
        sendTransaction: [Function: bound ],
        estimateGas: [Function: bound ],
        getData: [Function: bound ],
        '': [Circular] },
     log: 
      { [Function: bound ]
        request: [Function: bound ],
        call: [Function: bound ],
        sendTransaction: [Function: bound ],
        estimateGas: [Function: bound ],
        getData: [Function: bound ],
        'uint256,string': [Circular] },
     blockCreatedOn: 
      { [Function: bound ]
        request: [Function: bound ],
        call: [Function: bound ],
        sendTransaction: [Function: bound ],
        estimateGas: [Function: bound ],
        getData: [Function: bound ],
        'uint256,uint256,uint256': [Circular] },
     allEvents: [Function: bound ],
     GenericEvent: { [Function: bound ] 'uint256,string,uint256': [Function: bound ] } },
  creator: 
   { [Function]
     call: [Function],
     sendTransaction: [Function],
     request: [Function: bound ],
     estimateGas: [Function] },
  log: 
   { [Function]
     call: [Function],
     sendTransaction: [Function],
     request: [Function: bound ],
     estimateGas: [Function] },
  blockCreatedOn: 
   { [Function]
     call: [Function],
     sendTransaction: [Function],
     request: [Function: bound ],
     estimateGas: [Function] },
  GenericEvent: { [Function: bound ] 'uint256,string,uint256': [Function: bound ] },
  sendTransaction: [Function],
  send: [Function],
  allEvents: [Function: bound ],
  address: '0xa48b56dedb63a0bef8572925411fc8a8c053d2d7',
  transactionHash: null }
{"result":"log","id1":"1","string1":"7966a1339433cc1c0d9ef5bd85f4dd36"}
